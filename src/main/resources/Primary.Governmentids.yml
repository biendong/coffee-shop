openapi: 3.0.0

info:
  title: My Banyan - Primary endpoints
  description: My Banyan
  version: 1.0.0
  contact:
    name: Example
    email: example@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://e0le8wlr77.execute-api.us-west-1.amazonaws.com/dev
    description: Dev environment

paths:
  /airTravelClearances:
    get:
      tags:
        - AirTravelClearance
      description: Get list of air Travel Clearances
      summary: Get list of air Travel Clearances
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/xApiKey"
        - $ref: "#/components/parameters/shared"
        - $ref: "#/components/parameters/sharingUid"
      responses:
        200:
          description: The list of air Travel Clearances
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AirTravelClearanceResponses"
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      security:
        - GoBanyanAuthorizer: []
          api_key: []
      x-amazon-apigateway-integration:
        type: http
        passthroughBehavior: "when_no_match"
        httpMethod: GET
        uri: http://${stageVariables.apiLink}/api/v1/airTravelClearances
        connectionType: "VPC_LINK"
        connectionId: ${stageVariables.vpcLinkId}
        requestParameters:
          integration.request.header.Access-Control-Allow-Headers: "'*'"
          integration.request.header.Access-Control-Allow-Origin: "'*'"
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.querystring.shared: method.request.querystring.shared
          integration.request.querystring.sharingUid: method.request.querystring.sharingUid
        responses:
          200:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          500:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
    post:
      tags:
        - AirTravelClearance
      description: Create new air Travel Clearance
      summary: Create new air Travel Clearance
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/xApiKey"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AirTravelClearanceRequest"
      responses:
        201:
          description: Create air Travel Clearance successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AirTravelClearanceResponse"
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      security:
        - GoBanyanAuthorizer: []
          api_key: []
      x-amazon-apigateway-integration:
        type: http
        passthroughBehavior: "when_no_match"
        httpMethod: POST
        uri: http://${stageVariables.apiLink}/api/v1/airTravelClearances
        connectionType: "VPC_LINK"
        connectionId: ${stageVariables.vpcLinkId}
        requestParameters:
          integration.request.header.Access-Control-Allow-Headers: "'*'"
          integration.request.header.Access-Control-Allow-Origin: "'*'"
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.x-api-key: method.request.header.x-api-key
        responses:
          201:
            statusCode: 201
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          500:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
    options:
      tags:
        - AirTravelClearance
      summary: CORS support
      description: Enable CORS by returning correct headers
      parameters: []
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
      x-amazon-apigateway-integration:
        type: "mock"
        requestTemplates:
          application/json: "{\n  \"statusCode\" : 201\n}\n"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{}\n"
  /airTravelClearances/{id}:
    get:
      tags:
        - AirTravelClearance
      description: Get air Travel Clearance by id
      summary: Get air Travel Clearance by id
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/xApiKey"
        - $ref: "#/components/parameters/objectId"
        - $ref: "#/components/parameters/shared"
        - $ref: "#/components/parameters/sharingUid"
      responses:
        200:
          description: The air Travel Clearances by id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AirTravelClearanceResponse"
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      security:
        - GoBanyanAuthorizer: []
          api_key: []
      x-amazon-apigateway-integration:
        type: http
        passthroughBehavior: "when_no_match"
        httpMethod: GET
        uri: http://${stageVariables.apiLink}/api/v1/airTravelClearances/{id}
        connectionType: "VPC_LINK"
        connectionId: ${stageVariables.vpcLinkId}
        requestParameters:
          integration.request.header.Access-Control-Allow-Headers: "'*'"
          integration.request.header.Access-Control-Allow-Origin: "'*'"
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.path.id: method.request.path.id
          integration.request.querystring.shared: method.request.querystring.shared
          integration.request.querystring.sharingUid: method.request.querystring.sharingUid
        responses:
          200:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          500:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
    put:
      tags:
        - AirTravelClearance
      description: Update a air Travel Clearance
      summary: Update a air Travel Clearance
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/xApiKey"
        - $ref: "#/components/parameters/objectId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AirTravelClearanceRequest"
      responses:
        200:
          description: The updated air Travel Clearance
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AirTravelClearanceResponse"
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      security:
        - GoBanyanAuthorizer: []
          api_key: []
      x-amazon-apigateway-integration:
        type: http
        passthroughBehavior: "when_no_match"
        httpMethod: PUT
        uri: http://${stageVariables.apiLink}/api/v1/airTravelClearances/{id}
        connectionType: "VPC_LINK"
        connectionId: ${stageVariables.vpcLinkId}
        requestParameters:
          integration.request.header.Access-Control-Allow-Headers: "'*'"
          integration.request.header.Access-Control-Allow-Origin: "'*'"
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.path.id: method.request.path.id
        responses:
          200:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          500:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
    options:
      tags:
        - AirTravelClearance
      summary: CORS support
      description: Enable CORS by returning correct headers
      parameters:
        - $ref: "#/components/parameters/objectId"
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
      x-amazon-apigateway-integration:
        type: "mock"
        requestTemplates:
          application/json: "{\n  \"statusCode\" : 201\n}\n"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{}\n"
  /birthCerts:
    get:
      tags:
        - BirthCert
      description: Get list of birth Certs
      summary: Get list of birth Certs
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/xApiKey"
        - $ref: "#/components/parameters/shared"
        - $ref: "#/components/parameters/sharingUid"
      responses:
        200:
          description: The list of birth Certs
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BirthCertResponses"
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      security:
        - GoBanyanAuthorizer: []
          api_key: []
      x-amazon-apigateway-integration:
        type: http
        passthroughBehavior: "when_no_match"
        httpMethod: GET
        uri: http://${stageVariables.apiLink}/api/v1/birthCerts
        connectionType: "VPC_LINK"
        connectionId: ${stageVariables.vpcLinkId}
        requestParameters:
          integration.request.header.Access-Control-Allow-Headers: "'*'"
          integration.request.header.Access-Control-Allow-Origin: "'*'"
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.querystring.shared: method.request.querystring.shared
          integration.request.querystring.sharingUid: method.request.querystring.sharingUid
        responses:
          200:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          500:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
    post:
      tags:
        - BirthCert
      description: Create new birth certificate
      summary: Create new birth certificate
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/xApiKey"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BirthCertRequest"
      responses:
        201:
          description: Create Birth Cert successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BirthCertResponse"
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      security:
        - GoBanyanAuthorizer: []
          api_key: []
      x-amazon-apigateway-integration:
        type: http
        passthroughBehavior: "when_no_match"
        httpMethod: POST
        uri: http://${stageVariables.apiLink}/api/v1/birthCerts
        connectionType: "VPC_LINK"
        connectionId: ${stageVariables.vpcLinkId}
        requestParameters:
          integration.request.header.Access-Control-Allow-Headers: "'*'"
          integration.request.header.Access-Control-Allow-Origin: "'*'"
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.x-api-key: method.request.header.x-api-key
        responses:
          201:
            statusCode: 201
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          500:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
    options:
      tags:
        - BirthCert
      summary: CORS support
      description: Enable CORS by returning correct headers
      parameters: []
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
      x-amazon-apigateway-integration:
        type: "mock"
        requestTemplates:
          application/json: "{\n  \"statusCode\" : 201\n}\n"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{}\n"
  /birthCerts/{id}:
    get:
      tags:
        - BirthCert
      description: Get Birth Certificate by id
      summary: Get Birth Certificate by id
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/xApiKey"
        - $ref: "#/components/parameters/objectId"
        - $ref: "#/components/parameters/shared"
        - $ref: "#/components/parameters/sharingUid"
      responses:
        200:
          description: The Birth Certificate by id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BirthCertResponse"
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      security:
        - GoBanyanAuthorizer: []
          api_key: []
      x-amazon-apigateway-integration:
        type: http
        passthroughBehavior: "when_no_match"
        httpMethod: GET
        uri: http://${stageVariables.apiLink}/api/v1/birthCerts/{id}
        connectionType: "VPC_LINK"
        connectionId: ${stageVariables.vpcLinkId}
        requestParameters:
          integration.request.header.Access-Control-Allow-Headers: "'*'"
          integration.request.header.Access-Control-Allow-Origin: "'*'"
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.path.id: method.request.path.id
          integration.request.querystring.shared: method.request.querystring.shared
          integration.request.querystring.sharingUid: method.request.querystring.sharingUid
        responses:
          200:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          500:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
    put:
      tags:
        - BirthCert
      description: Update a Birth Certificate
      summary: Update a Birth Certificate
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/xApiKey"
        - $ref: "#/components/parameters/objectId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BirthCertRequest"
      responses:
        200:
          description: The updated Birth Certificate
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BirthCertResponse"
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      security:
        - GoBanyanAuthorizer: []
          api_key: []
      x-amazon-apigateway-integration:
        type: http
        passthroughBehavior: "when_no_match"
        httpMethod: PUT
        uri: http://${stageVariables.apiLink}/api/v1/birthCerts/{id}
        connectionType: "VPC_LINK"
        connectionId: ${stageVariables.vpcLinkId}
        requestParameters:
          integration.request.header.Access-Control-Allow-Headers: "'*'"
          integration.request.header.Access-Control-Allow-Origin: "'*'"
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.path.id: method.request.path.id
        responses:
          200:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          500:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
    options:
      tags:
        - BirthCert
      summary: CORS support
      description: Enable CORS by returning correct headers
      parameters:
        - $ref: "#/components/parameters/objectId"
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
      x-amazon-apigateway-integration:
        type: "mock"
        requestTemplates:
          application/json: "{\n  \"statusCode\" : 201\n}\n"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{}\n"
  /devices:
    get:
      tags:
        - Device
      description: Get list of devices
      summary: Get list of devices
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/xApiKey"
        - $ref: "#/components/parameters/shared"
        - $ref: "#/components/parameters/sharingUid"
      responses:
        200:
          description: The list of devices
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeviceResponses"
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      security:
        - GoBanyanAuthorizer: []
          api_key: []
      x-amazon-apigateway-integration:
        type: http
        passthroughBehavior: "when_no_match"
        httpMethod: GET
        uri: http://${stageVariables.apiLink}/api/v1/devices
        connectionType: "VPC_LINK"
        connectionId: ${stageVariables.vpcLinkId}
        requestParameters:
          integration.request.header.Access-Control-Allow-Headers: "'*'"
          integration.request.header.Access-Control-Allow-Origin: "'*'"
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.querystring.shared: method.request.querystring.shared
          integration.request.querystring.sharingUid: method.request.querystring.sharingUid
        responses:
          200:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          500:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
    post:
      tags:
        - Device
      description: Create new device
      summary: Create new device
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/xApiKey"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeviceRequest"
      responses:
        201:
          description: Create device successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeviceResponse"
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      security:
        - GoBanyanAuthorizer: []
          api_key: []
      x-amazon-apigateway-integration:
        type: http
        passthroughBehavior: "when_no_match"
        httpMethod: POST
        uri: http://${stageVariables.apiLink}/api/v1/devices
        connectionType: "VPC_LINK"
        connectionId: ${stageVariables.vpcLinkId}
        requestParameters:
          integration.request.header.Access-Control-Allow-Headers: "'*'"
          integration.request.header.Access-Control-Allow-Origin: "'*'"
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.x-api-key: method.request.header.x-api-key
        responses:
          201:
            statusCode: 201
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          500:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
    options:
      tags:
        - Device
      summary: CORS support
      description: Enable CORS by returning correct headers
      parameters: []
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
      x-amazon-apigateway-integration:
        type: "mock"
        requestTemplates:
          application/json: "{\n  \"statusCode\" : 201\n}\n"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{}\n"
  /devices/{id}:
    get:
      tags:
        - Device
      description: Get device by id
      summary: Get device by id
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/xApiKey"
        - $ref: "#/components/parameters/objectId"
        - $ref: "#/components/parameters/shared"
        - $ref: "#/components/parameters/sharingUid"
      responses:
        200:
          description: The device by id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeviceResponse"
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      security:
        - GoBanyanAuthorizer: []
          api_key: []
      x-amazon-apigateway-integration:
        type: http
        passthroughBehavior: "when_no_match"
        httpMethod: GET
        uri: http://${stageVariables.apiLink}/api/v1/devices/{id}
        connectionType: "VPC_LINK"
        connectionId: ${stageVariables.vpcLinkId}
        requestParameters:
          integration.request.header.Access-Control-Allow-Headers: "'*'"
          integration.request.header.Access-Control-Allow-Origin: "'*'"
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.path.id: method.request.path.id
          integration.request.querystring.shared: method.request.querystring.shared
          integration.request.querystring.sharingUid: method.request.querystring.sharingUid
        responses:
          200:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          500:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
    put:
      tags:
        - Device
      description: Update a device
      summary: Update a device
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/xApiKey"
        - $ref: "#/components/parameters/objectId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeviceRequest"
      responses:
        200:
          description: The updated device
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeviceResponse"
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      security:
        - GoBanyanAuthorizer: []
          api_key: []
      x-amazon-apigateway-integration:
        type: http
        passthroughBehavior: "when_no_match"
        httpMethod: PUT
        uri: http://${stageVariables.apiLink}/api/v1/devices/{id}
        connectionType: "VPC_LINK"
        connectionId: ${stageVariables.vpcLinkId}
        requestParameters:
          integration.request.header.Access-Control-Allow-Headers: "'*'"
          integration.request.header.Access-Control-Allow-Origin: "'*'"
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.path.id: method.request.path.id
        responses:
          200:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          500:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
    options:
      tags:
        - Device
      summary: CORS support
      description: Enable CORS by returning correct headers
      parameters:
        - $ref: "#/components/parameters/objectId"
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
      x-amazon-apigateway-integration:
        type: "mock"
        requestTemplates:
          application/json: "{\n  \"statusCode\" : 201\n}\n"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{}\n"
  /medicares:
    get:
      tags:
        - Medicare
      description: Get list of medicares
      summary: Get list of medicares
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/xApiKey"
        - $ref: "#/components/parameters/shared"
        - $ref: "#/components/parameters/sharingUid"
      responses:
        200:
          description: The list of medicares
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MedicareResponses"
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      security:
        - GoBanyanAuthorizer: []
          api_key: []
      x-amazon-apigateway-integration:
        type: http
        passthroughBehavior: "when_no_match"
        httpMethod: GET
        uri: http://${stageVariables.apiLink}/api/v1/medicares
        connectionType: "VPC_LINK"
        connectionId: ${stageVariables.vpcLinkId}
        requestParameters:
          integration.request.header.Access-Control-Allow-Headers: "'*'"
          integration.request.header.Access-Control-Allow-Origin: "'*'"
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.querystring.shared: method.request.querystring.shared
          integration.request.querystring.sharingUid: method.request.querystring.sharingUid
        responses:
          200:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          500:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
    post:
      tags:
        - Medicare
      description: Create new medicare
      summary: Create new medicare
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/xApiKey"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MedicareRequest"
      responses:
        201:
          description: Create medicare successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MedicareResponse"
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      security:
        - GoBanyanAuthorizer: []
          api_key: []
      x-amazon-apigateway-integration:
        type: http
        passthroughBehavior: "when_no_match"
        httpMethod: POST
        uri: http://${stageVariables.apiLink}/api/v1/medicares
        connectionType: "VPC_LINK"
        connectionId: ${stageVariables.vpcLinkId}
        requestParameters:
          integration.request.header.Access-Control-Allow-Headers: "'*'"
          integration.request.header.Access-Control-Allow-Origin: "'*'"
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.x-api-key: method.request.header.x-api-key
        responses:
          201:
            statusCode: 201
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          500:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
    options:
      tags:
        - Medicare
      summary: CORS support
      description: Enable CORS by returning correct headers
      parameters: []
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
      x-amazon-apigateway-integration:
        type: "mock"
        requestTemplates:
          application/json: "{\n  \"statusCode\" : 201\n}\n"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{}\n"
  /medicares/{id}:
    get:
      tags:
        - Medicare
      description: Get medicare by id
      summary: Get medicare by id
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/xApiKey"
        - $ref: "#/components/parameters/objectId"
        - $ref: "#/components/parameters/shared"
        - $ref: "#/components/parameters/sharingUid"
      responses:
        200:
          description: The medicare by id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MedicareResponse"
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      security:
        - GoBanyanAuthorizer: []
          api_key: []
      x-amazon-apigateway-integration:
        type: http
        passthroughBehavior: "when_no_match"
        httpMethod: GET
        uri: http://${stageVariables.apiLink}/api/v1/medicares/{id}
        connectionType: "VPC_LINK"
        connectionId: ${stageVariables.vpcLinkId}
        requestParameters:
          integration.request.header.Access-Control-Allow-Headers: "'*'"
          integration.request.header.Access-Control-Allow-Origin: "'*'"
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.path.id: method.request.path.id
          integration.request.querystring.shared: method.request.querystring.shared
          integration.request.querystring.sharingUid: method.request.querystring.sharingUid
        responses:
          200:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          500:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
    put:
      tags:
        - Medicare
      description: Update a medicare
      summary: Update a medicare
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/xApiKey"
        - $ref: "#/components/parameters/objectId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MedicareRequest"
      responses:
        200:
          description: The updated medicare
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MedicareResponse"
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      security:
        - GoBanyanAuthorizer: []
          api_key: []
      x-amazon-apigateway-integration:
        type: http
        passthroughBehavior: "when_no_match"
        httpMethod: PUT
        uri: http://${stageVariables.apiLink}/api/v1/medicares/{id}
        connectionType: "VPC_LINK"
        connectionId: ${stageVariables.vpcLinkId}
        requestParameters:
          integration.request.header.Access-Control-Allow-Headers: "'*'"
          integration.request.header.Access-Control-Allow-Origin: "'*'"
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.path.id: method.request.path.id
        responses:
          200:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          500:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
    options:
      tags:
        - Medicare
      summary: CORS support
      description: Enable CORS by returning correct headers
      parameters:
        - $ref: "#/components/parameters/objectId"
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
      x-amazon-apigateway-integration:
        type: "mock"
        requestTemplates:
          application/json: "{\n  \"statusCode\" : 201\n}\n"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{}\n"
  /naturalizations:
    get:
      tags:
        - Naturalization
      description: Get list of naturalizations
      summary: Get list of naturalizations
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/xApiKey"
        - $ref: "#/components/parameters/shared"
        - $ref: "#/components/parameters/sharingUid"
      responses:
        200:
          description: The list of naturalizations
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NaturalizationResponses"
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      security:
        - GoBanyanAuthorizer: []
          api_key: []
      x-amazon-apigateway-integration:
        type: http
        passthroughBehavior: "when_no_match"
        httpMethod: GET
        uri: http://${stageVariables.apiLink}/api/v1/naturalizations
        connectionType: "VPC_LINK"
        connectionId: ${stageVariables.vpcLinkId}
        requestParameters:
          integration.request.header.Access-Control-Allow-Headers: "'*'"
          integration.request.header.Access-Control-Allow-Origin: "'*'"
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.querystring.shared: method.request.querystring.shared
          integration.request.querystring.sharingUid: method.request.querystring.sharingUid
        responses:
          200:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          500:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
    post:
      tags:
        - Naturalization
      description: Create new naturalization
      summary: Create new naturalization
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/xApiKey"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NaturalizationRequest"
      responses:
        201:
          description: Create naturalization successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NaturalizationResponse"
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      security:
        - GoBanyanAuthorizer: []
          api_key: []
      x-amazon-apigateway-integration:
        type: http
        passthroughBehavior: "when_no_match"
        httpMethod: POST
        uri: http://${stageVariables.apiLink}/api/v1/naturalizations
        connectionType: "VPC_LINK"
        connectionId: ${stageVariables.vpcLinkId}
        requestParameters:
          integration.request.header.Access-Control-Allow-Headers: "'*'"
          integration.request.header.Access-Control-Allow-Origin: "'*'"
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.x-api-key: method.request.header.x-api-key
        responses:
          201:
            statusCode: 201
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          500:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
    options:
      tags:
        - Naturalization
      summary: CORS support
      description: Enable CORS by returning correct headers
      parameters: []
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
      x-amazon-apigateway-integration:
        type: "mock"
        requestTemplates:
          application/json: "{\n  \"statusCode\" : 201\n}\n"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{}\n"
  /naturalizations/{id}:
    get:
      tags:
        - Naturalization
      description: Get naturalization by id
      summary: Get naturalization by id
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/xApiKey"
        - $ref: "#/components/parameters/objectId"
        - $ref: "#/components/parameters/shared"
        - $ref: "#/components/parameters/sharingUid"
      responses:
        200:
          description: The naturalization by id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NaturalizationResponse"
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      security:
        - GoBanyanAuthorizer: []
          api_key: []
      x-amazon-apigateway-integration:
        type: http
        passthroughBehavior: "when_no_match"
        httpMethod: GET
        uri: http://${stageVariables.apiLink}/api/v1/naturalizations/{id}
        connectionType: "VPC_LINK"
        connectionId: ${stageVariables.vpcLinkId}
        requestParameters:
          integration.request.header.Access-Control-Allow-Headers: "'*'"
          integration.request.header.Access-Control-Allow-Origin: "'*'"
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.path.id: method.request.path.id
          integration.request.querystring.shared: method.request.querystring.shared
          integration.request.querystring.sharingUid: method.request.querystring.sharingUid
        responses:
          200:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          500:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
    put:
      tags:
        - Naturalization
      description: Update a naturalization
      summary: Update a naturalization
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/xApiKey"
        - $ref: "#/components/parameters/objectId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NaturalizationRequest"
      responses:
        200:
          description: The updated naturalization
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NaturalizationResponse"
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      security:
        - GoBanyanAuthorizer: []
          api_key: []
      x-amazon-apigateway-integration:
        type: http
        passthroughBehavior: "when_no_match"
        httpMethod: PUT
        uri: http://${stageVariables.apiLink}/api/v1/naturalizations/{id}
        connectionType: "VPC_LINK"
        connectionId: ${stageVariables.vpcLinkId}
        requestParameters:
          integration.request.header.Access-Control-Allow-Headers: "'*'"
          integration.request.header.Access-Control-Allow-Origin: "'*'"
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.path.id: method.request.path.id
        responses:
          200:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          500:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
    options:
      tags:
        - Naturalization
      summary: CORS support
      description: Enable CORS by returning correct headers
      parameters:
        - $ref: "#/components/parameters/objectId"
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
      x-amazon-apigateway-integration:
        type: "mock"
        requestTemplates:
          application/json: "{\n  \"statusCode\" : 201\n}\n"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{}\n"
  /onlineAccounts:
    get:
      tags:
        - OnlineAccount
      description: Get list of onlineAccounts
      summary: Get list of onlineAccounts
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/xApiKey"
        - $ref: "#/components/parameters/shared"
        - $ref: "#/components/parameters/sharingUid"
      responses:
        200:
          description: The list of onlineAccounts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OnlineAccountResponses"
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      security:
        - GoBanyanAuthorizer: []
          api_key: []
      x-amazon-apigateway-integration:
        type: http
        passthroughBehavior: "when_no_match"
        httpMethod: GET
        uri: http://${stageVariables.apiLink}/api/v1/onlineAccounts
        connectionType: "VPC_LINK"
        connectionId: ${stageVariables.vpcLinkId}
        requestParameters:
          integration.request.header.Access-Control-Allow-Headers: "'*'"
          integration.request.header.Access-Control-Allow-Origin: "'*'"
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.querystring.shared: method.request.querystring.shared
          integration.request.querystring.sharingUid: method.request.querystring.sharingUid
        responses:
          200:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          500:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
    post:
      tags:
        - OnlineAccount
      description: Create new onlineAccount
      summary: Create new onlineAccount
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/xApiKey"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OnlineAccountRequest"
      responses:
        201:
          description: Create onlineAccount successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OnlineAccountResponse"
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      security:
        - GoBanyanAuthorizer: []
          api_key: []
      x-amazon-apigateway-integration:
        type: http
        passthroughBehavior: "when_no_match"
        httpMethod: POST
        uri: http://${stageVariables.apiLink}/api/v1/onlineAccounts
        connectionType: "VPC_LINK"
        connectionId: ${stageVariables.vpcLinkId}
        requestParameters:
          integration.request.header.Access-Control-Allow-Headers: "'*'"
          integration.request.header.Access-Control-Allow-Origin: "'*'"
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.x-api-key: method.request.header.x-api-key
        responses:
          201:
            statusCode: 201
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          500:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
    options:
      tags:
        - OnlineAccount
      summary: CORS support
      description: Enable CORS by returning correct headers
      parameters: []
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
      x-amazon-apigateway-integration:
        type: "mock"
        requestTemplates:
          application/json: "{\n  \"statusCode\" : 201\n}\n"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{}\n"
  /onlineAccounts/{id}:
    get:
      tags:
        - OnlineAccount
      description: Get onlineAccount by id
      summary: Get onlineAccount by id
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/xApiKey"
        - $ref: "#/components/parameters/objectId"
        - $ref: "#/components/parameters/shared"
        - $ref: "#/components/parameters/sharingUid"
      responses:
        200:
          description: The onlineAccount by id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OnlineAccountResponse"
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      security:
        - GoBanyanAuthorizer: []
          api_key: []
      x-amazon-apigateway-integration:
        type: http
        passthroughBehavior: "when_no_match"
        httpMethod: GET
        uri: http://${stageVariables.apiLink}/api/v1/onlineAccounts/{id}
        connectionType: "VPC_LINK"
        connectionId: ${stageVariables.vpcLinkId}
        requestParameters:
          integration.request.header.Access-Control-Allow-Headers: "'*'"
          integration.request.header.Access-Control-Allow-Origin: "'*'"
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.path.id: method.request.path.id
          integration.request.querystring.shared: method.request.querystring.shared
          integration.request.querystring.sharingUid: method.request.querystring.sharingUid
        responses:
          200:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          500:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
    put:
      tags:
        - OnlineAccount
      description: Update a onlineAccount
      summary: Update a onlineAccount
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/xApiKey"
        - $ref: "#/components/parameters/objectId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OnlineAccountRequest"
      responses:
        200:
          description: The updated onlineAccount
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OnlineAccountResponse"
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      security:
        - GoBanyanAuthorizer: []
          api_key: []
      x-amazon-apigateway-integration:
        type: http
        passthroughBehavior: "when_no_match"
        httpMethod: PUT
        uri: http://${stageVariables.apiLink}/api/v1/onlineAccounts/{id}
        connectionType: "VPC_LINK"
        connectionId: ${stageVariables.vpcLinkId}
        requestParameters:
          integration.request.header.Access-Control-Allow-Headers: "'*'"
          integration.request.header.Access-Control-Allow-Origin: "'*'"
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.path.id: method.request.path.id
        responses:
          200:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          500:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
    options:
      tags:
        - OnlineAccount
      summary: CORS support
      description: Enable CORS by returning correct headers
      parameters:
        - $ref: "#/components/parameters/objectId"
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
      x-amazon-apigateway-integration:
        type: "mock"
        requestTemplates:
          application/json: "{\n  \"statusCode\" : 201\n}\n"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{}\n"
  /merchantAccounts:
    get:
      tags:
        - MerchantAccount
      description: Get list of merchantAccounts
      summary: Get list of merchantAccounts
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/xApiKey"
        - $ref: "#/components/parameters/shared"
        - $ref: "#/components/parameters/sharingUid"
      responses:
        200:
          description: The list of merchantAccounts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MerchantAccountResponses"
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      security:
        - GoBanyanAuthorizer: []
          api_key: []
      x-amazon-apigateway-integration:
        type: http
        passthroughBehavior: "when_no_match"
        httpMethod: GET
        uri: http://${stageVariables.apiLink}/api/v1/merchantAccounts
        connectionType: "VPC_LINK"
        connectionId: ${stageVariables.vpcLinkId}
        requestParameters:
          integration.request.header.Access-Control-Allow-Headers: "'*'"
          integration.request.header.Access-Control-Allow-Origin: "'*'"
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.querystring.shared: method.request.querystring.shared
          integration.request.querystring.sharingUid: method.request.querystring.sharingUid
        responses:
          200:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          500:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
    post:
      tags:
        - MerchantAccount
      description: Create new merchantAccount
      summary: Create new merchantAccount
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/xApiKey"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MerchantAccountRequest"
      responses:
        201:
          description: Create merchantAccount successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MerchantAccountResponse"
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      security:
        - GoBanyanAuthorizer: []
          api_key: []
      x-amazon-apigateway-integration:
        type: http
        passthroughBehavior: "when_no_match"
        httpMethod: POST
        uri: http://${stageVariables.apiLink}/api/v1/merchantAccounts
        connectionType: "VPC_LINK"
        connectionId: ${stageVariables.vpcLinkId}
        requestParameters:
          integration.request.header.Access-Control-Allow-Headers: "'*'"
          integration.request.header.Access-Control-Allow-Origin: "'*'"
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.x-api-key: method.request.header.x-api-key
        responses:
          201:
            statusCode: 201
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          500:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
    options:
      tags:
        - MerchantAccount
      summary: CORS support
      description: Enable CORS by returning correct headers
      parameters: []
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
      x-amazon-apigateway-integration:
        type: "mock"
        requestTemplates:
          application/json: "{\n  \"statusCode\" : 201\n}\n"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{}\n"
  /merchantAccounts/{id}:
    get:
      tags:
        - MerchantAccount
      description: Get merchantAccount by id
      summary: Get merchantAccount by id
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/xApiKey"
        - $ref: "#/components/parameters/objectId"
        - $ref: "#/components/parameters/shared"
        - $ref: "#/components/parameters/sharingUid"
      responses:
        200:
          description: The merchantAccount by id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MerchantAccountResponse"
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      security:
        - GoBanyanAuthorizer: []
          api_key: []
      x-amazon-apigateway-integration:
        type: http
        passthroughBehavior: "when_no_match"
        httpMethod: GET
        uri: http://${stageVariables.apiLink}/api/v1/merchantAccounts/{id}
        connectionType: "VPC_LINK"
        connectionId: ${stageVariables.vpcLinkId}
        requestParameters:
          integration.request.header.Access-Control-Allow-Headers: "'*'"
          integration.request.header.Access-Control-Allow-Origin: "'*'"
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.path.id: method.request.path.id
          integration.request.querystring.shared: method.request.querystring.shared
          integration.request.querystring.sharingUid: method.request.querystring.sharingUid
        responses:
          200:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          500:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
    put:
      tags:
        - MerchantAccount
      description: Update a merchantAccount
      summary: Update a merchantAccount
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/xApiKey"
        - $ref: "#/components/parameters/objectId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MerchantAccountRequest"
      responses:
        200:
          description: The updated merchantAccount
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MerchantAccountResponse"
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      security:
        - GoBanyanAuthorizer: []
          api_key: []
      x-amazon-apigateway-integration:
        type: http
        passthroughBehavior: "when_no_match"
        httpMethod: PUT
        uri: http://${stageVariables.apiLink}/api/v1/merchantAccounts/{id}
        connectionType: "VPC_LINK"
        connectionId: ${stageVariables.vpcLinkId}
        requestParameters:
          integration.request.header.Access-Control-Allow-Headers: "'*'"
          integration.request.header.Access-Control-Allow-Origin: "'*'"
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.path.id: method.request.path.id
        responses:
          200:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          500:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
    options:
      tags:
        - MerchantAccount
      summary: CORS support
      description: Enable CORS by returning correct headers
      parameters:
        - $ref: "#/components/parameters/objectId"
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
      x-amazon-apigateway-integration:
        type: "mock"
        requestTemplates:
          application/json: "{\n  \"statusCode\" : 201\n}\n"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{}\n"
  /bankAccounts:
    get:
      tags:
        - BankAccount
      description: Get list of bankAccounts
      summary: Get list of bankAccounts
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/xApiKey"
        - $ref: "#/components/parameters/shared"
        - $ref: "#/components/parameters/sharingUid"
      responses:
        200:
          description: The list of bankAccounts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BankAccountResponses"
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      security:
        - GoBanyanAuthorizer: []
          api_key: []
      x-amazon-apigateway-integration:
        type: http
        passthroughBehavior: "when_no_match"
        httpMethod: GET
        uri: http://${stageVariables.apiLink}/api/v1/bankAccounts
        connectionType: "VPC_LINK"
        connectionId: ${stageVariables.vpcLinkId}
        requestParameters:
          integration.request.header.Access-Control-Allow-Headers: "'*'"
          integration.request.header.Access-Control-Allow-Origin: "'*'"
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.querystring.shared: method.request.querystring.shared
          integration.request.querystring.sharingUid: method.request.querystring.sharingUid
        responses:
          200:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          500:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
    post:
      tags:
        - BankAccount
      description: Create new bankAccount
      summary: Create new bankAccount
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/xApiKey"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BankAccountRequest"
      responses:
        201:
          description: Create bankAccount successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BankAccountResponse"
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      security:
        - GoBanyanAuthorizer: []
          api_key: []
      x-amazon-apigateway-integration:
        type: http
        passthroughBehavior: "when_no_match"
        httpMethod: POST
        uri: http://${stageVariables.apiLink}/api/v1/bankAccounts
        connectionType: "VPC_LINK"
        connectionId: ${stageVariables.vpcLinkId}
        requestParameters:
          integration.request.header.Access-Control-Allow-Headers: "'*'"
          integration.request.header.Access-Control-Allow-Origin: "'*'"
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.x-api-key: method.request.header.x-api-key
        responses:
          201:
            statusCode: 201
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          500:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
    options:
      tags:
        - BankAccount
      summary: CORS support
      description: Enable CORS by returning correct headers
      parameters: []
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
      x-amazon-apigateway-integration:
        type: "mock"
        requestTemplates:
          application/json: "{\n  \"statusCode\" : 201\n}\n"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{}\n"
  /bankAccounts/{id}:
    get:
      tags:
        - BankAccount
      description: Get bankAccount by id
      summary: Get bankAccount by id
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/xApiKey"
        - $ref: "#/components/parameters/objectId"
        - $ref: "#/components/parameters/shared"
        - $ref: "#/components/parameters/sharingUid"
      responses:
        200:
          description: The bankAccount by id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BankAccountResponse"
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      security:
        - GoBanyanAuthorizer: []
          api_key: []
      x-amazon-apigateway-integration:
        type: http
        passthroughBehavior: "when_no_match"
        httpMethod: GET
        uri: http://${stageVariables.apiLink}/api/v1/bankAccounts/{id}
        connectionType: "VPC_LINK"
        connectionId: ${stageVariables.vpcLinkId}
        requestParameters:
          integration.request.header.Access-Control-Allow-Headers: "'*'"
          integration.request.header.Access-Control-Allow-Origin: "'*'"
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.path.id: method.request.path.id
          integration.request.querystring.shared: method.request.querystring.shared
          integration.request.querystring.sharingUid: method.request.querystring.sharingUid
        responses:
          200:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          500:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
    put:
      tags:
        - BankAccount
      description: Update a bankAccount
      summary: Update a bankAccount
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/xApiKey"
        - $ref: "#/components/parameters/objectId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BankAccountRequest"
      responses:
        200:
          description: The updated bankAccount
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BankAccountResponse"
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      security:
        - GoBanyanAuthorizer: []
          api_key: []
      x-amazon-apigateway-integration:
        type: http
        passthroughBehavior: "when_no_match"
        httpMethod: PUT
        uri: http://${stageVariables.apiLink}/api/v1/bankAccounts/{id}
        connectionType: "VPC_LINK"
        connectionId: ${stageVariables.vpcLinkId}
        requestParameters:
          integration.request.header.Access-Control-Allow-Headers: "'*'"
          integration.request.header.Access-Control-Allow-Origin: "'*'"
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.path.id: method.request.path.id
        responses:
          200:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          500:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
    options:
      tags:
        - BankAccount
      summary: CORS support
      description: Enable CORS by returning correct headers
      parameters:
        - $ref: "#/components/parameters/objectId"
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
      x-amazon-apigateway-integration:
        type: "mock"
        requestTemplates:
          application/json: "{\n  \"statusCode\" : 201\n}\n"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{}\n"
  /bankCards:
    get:
      tags:
        - BankCard
      description: Get list of bankCards
      summary: Get list of bankCards
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/xApiKey"
        - $ref: "#/components/parameters/shared"
        - $ref: "#/components/parameters/sharingUid"
      responses:
        200:
          description: The list of bankCards
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BankCardResponses"
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      security:
        - GoBanyanAuthorizer: []
          api_key: []
      x-amazon-apigateway-integration:
        type: http
        passthroughBehavior: "when_no_match"
        httpMethod: GET
        uri: http://${stageVariables.apiLink}/api/v1/bankCards
        connectionType: "VPC_LINK"
        connectionId: ${stageVariables.vpcLinkId}
        requestParameters:
          integration.request.header.Access-Control-Allow-Headers: "'*'"
          integration.request.header.Access-Control-Allow-Origin: "'*'"
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.querystring.shared: method.request.querystring.shared
          integration.request.querystring.sharingUid: method.request.querystring.sharingUid
        responses:
          200:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          500:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
    post:
      tags:
        - BankCard
      description: Create new bankCard
      summary: Create new bankCard
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/xApiKey"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BankCardRequest"
      responses:
        201:
          description: Create bankCard successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BankCardResponse"
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      security:
        - GoBanyanAuthorizer: []
          api_key: []
      x-amazon-apigateway-integration:
        type: http
        passthroughBehavior: "when_no_match"
        httpMethod: POST
        uri: http://${stageVariables.apiLink}/api/v1/bankCards
        connectionType: "VPC_LINK"
        connectionId: ${stageVariables.vpcLinkId}
        requestParameters:
          integration.request.header.Access-Control-Allow-Headers: "'*'"
          integration.request.header.Access-Control-Allow-Origin: "'*'"
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.x-api-key: method.request.header.x-api-key
        responses:
          201:
            statusCode: 201
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          500:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
    options:
      tags:
        - BankCard
      summary: CORS support
      description: Enable CORS by returning correct headers
      parameters: []
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
      x-amazon-apigateway-integration:
        type: "mock"
        requestTemplates:
          application/json: "{\n  \"statusCode\" : 201\n}\n"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{}\n"
  /bankCards/{id}:
    get:
      tags:
        - BankCard
      description: Get bankCard by id
      summary: Get bankCard by id
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/xApiKey"
        - $ref: "#/components/parameters/objectId"
        - $ref: "#/components/parameters/shared"
        - $ref: "#/components/parameters/sharingUid"
      responses:
        200:
          description: The bankCard by id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BankCardResponse"
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      security:
        - GoBanyanAuthorizer: []
          api_key: []
      x-amazon-apigateway-integration:
        type: http
        passthroughBehavior: "when_no_match"
        httpMethod: GET
        uri: http://${stageVariables.apiLink}/api/v1/bankCards/{id}
        connectionType: "VPC_LINK"
        connectionId: ${stageVariables.vpcLinkId}
        requestParameters:
          integration.request.header.Access-Control-Allow-Headers: "'*'"
          integration.request.header.Access-Control-Allow-Origin: "'*'"
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.path.id: method.request.path.id
          integration.request.querystring.shared: method.request.querystring.shared
          integration.request.querystring.sharingUid: method.request.querystring.sharingUid
        responses:
          200:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          500:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
    put:
      tags:
        - BankCard
      description: Update a bankCard
      summary: Update a bankCard
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/xApiKey"
        - $ref: "#/components/parameters/objectId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BankCardRequest"
      responses:
        200:
          description: The updated bankCard
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BankCardResponse"
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      security:
        - GoBanyanAuthorizer: []
          api_key: []
      x-amazon-apigateway-integration:
        type: http
        passthroughBehavior: "when_no_match"
        httpMethod: PUT
        uri: http://${stageVariables.apiLink}/api/v1/bankCards/{id}
        connectionType: "VPC_LINK"
        connectionId: ${stageVariables.vpcLinkId}
        requestParameters:
          integration.request.header.Access-Control-Allow-Headers: "'*'"
          integration.request.header.Access-Control-Allow-Origin: "'*'"
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.path.id: method.request.path.id
        responses:
          200:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          500:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
    options:
      tags:
        - BankCard
      summary: CORS support
      description: Enable CORS by returning correct headers
      parameters:
        - $ref: "#/components/parameters/objectId"
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
      x-amazon-apigateway-integration:
        type: "mock"
        requestTemplates:
          application/json: "{\n  \"statusCode\" : 201\n}\n"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{}\n"
  /investmentAccounts:
    get:
      tags:
        - InvestmentAccount
      description: Get list of investmentAccounts
      summary: Get list of investmentAccounts
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/xApiKey"
        - $ref: "#/components/parameters/shared"
        - $ref: "#/components/parameters/sharingUid"
      responses:
        200:
          description: The list of investmentAccounts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvestmentAccountResponses"
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      security:
        - GoBanyanAuthorizer: []
          api_key: []
      x-amazon-apigateway-integration:
        type: http
        passthroughBehavior: "when_no_match"
        httpMethod: GET
        uri: http://${stageVariables.apiLink}/api/v1/investmentAccounts
        connectionType: "VPC_LINK"
        connectionId: ${stageVariables.vpcLinkId}
        requestParameters:
          integration.request.header.Access-Control-Allow-Headers: "'*'"
          integration.request.header.Access-Control-Allow-Origin: "'*'"
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.querystring.shared: method.request.querystring.shared
          integration.request.querystring.sharingUid: method.request.querystring.sharingUid
        responses:
          200:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          500:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
    post:
      tags:
        - InvestmentAccount
      description: Create new investmentAccount
      summary: Create new investmentAccount
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/xApiKey"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InvestmentAccountRequest"
      responses:
        201:
          description: Create investmentAccount successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvestmentAccountResponse"
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      security:
        - GoBanyanAuthorizer: []
          api_key: []
      x-amazon-apigateway-integration:
        type: http
        passthroughBehavior: "when_no_match"
        httpMethod: POST
        uri: http://${stageVariables.apiLink}/api/v1/investmentAccounts
        connectionType: "VPC_LINK"
        connectionId: ${stageVariables.vpcLinkId}
        requestParameters:
          integration.request.header.Access-Control-Allow-Headers: "'*'"
          integration.request.header.Access-Control-Allow-Origin: "'*'"
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.x-api-key: method.request.header.x-api-key
        responses:
          201:
            statusCode: 201
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          500:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
    options:
      tags:
        - InvestmentAccount
      summary: CORS support
      description: Enable CORS by returning correct headers
      parameters: []
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
      x-amazon-apigateway-integration:
        type: "mock"
        requestTemplates:
          application/json: "{\n  \"statusCode\" : 201\n}\n"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{}\n"
  /investmentAccounts/{id}:
    get:
      tags:
        - InvestmentAccount
      description: Get investmentAccount by id
      summary: Get investmentAccount by id
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/xApiKey"
        - $ref: "#/components/parameters/objectId"
        - $ref: "#/components/parameters/shared"
        - $ref: "#/components/parameters/sharingUid"
      responses:
        200:
          description: The investmentAccount by id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvestmentAccountResponse"
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      security:
        - GoBanyanAuthorizer: []
          api_key: []
      x-amazon-apigateway-integration:
        type: http
        passthroughBehavior: "when_no_match"
        httpMethod: GET
        uri: http://${stageVariables.apiLink}/api/v1/investmentAccounts/{id}
        connectionType: "VPC_LINK"
        connectionId: ${stageVariables.vpcLinkId}
        requestParameters:
          integration.request.header.Access-Control-Allow-Headers: "'*'"
          integration.request.header.Access-Control-Allow-Origin: "'*'"
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.path.id: method.request.path.id
          integration.request.querystring.shared: method.request.querystring.shared
          integration.request.querystring.sharingUid: method.request.querystring.sharingUid
        responses:
          200:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          500:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
    put:
      tags:
        - InvestmentAccount
      description: Update a investmentAccount
      summary: Update a investmentAccount
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/xApiKey"
        - $ref: "#/components/parameters/objectId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InvestmentAccountRequest"
      responses:
        200:
          description: The updated investmentAccount
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvestmentAccountResponse"
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      security:
        - GoBanyanAuthorizer: []
          api_key: []
      x-amazon-apigateway-integration:
        type: http
        passthroughBehavior: "when_no_match"
        httpMethod: PUT
        uri: http://${stageVariables.apiLink}/api/v1/investmentAccounts/{id}
        connectionType: "VPC_LINK"
        connectionId: ${stageVariables.vpcLinkId}
        requestParameters:
          integration.request.header.Access-Control-Allow-Headers: "'*'"
          integration.request.header.Access-Control-Allow-Origin: "'*'"
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.path.id: method.request.path.id
        responses:
          200:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          500:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
    options:
      tags:
        - InvestmentAccount
      summary: CORS support
      description: Enable CORS by returning correct headers
      parameters:
        - $ref: "#/components/parameters/objectId"
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
      x-amazon-apigateway-integration:
        type: "mock"
        requestTemplates:
          application/json: "{\n  \"statusCode\" : 201\n}\n"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{}\n"
  /insurances:
    get:
      tags:
        - Insurance
      description: Get list of insurances
      summary: Get list of insurances
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/xApiKey"
        - $ref: "#/components/parameters/shared"
        - $ref: "#/components/parameters/sharingUid"
      responses:
        200:
          description: The list of insurances
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InsuranceResponses"
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      security:
        - GoBanyanAuthorizer: []
          api_key: []
      x-amazon-apigateway-integration:
        type: http
        passthroughBehavior: "when_no_match"
        httpMethod: GET
        uri: http://${stageVariables.apiLink}/api/v1/insurances
        connectionType: "VPC_LINK"
        connectionId: ${stageVariables.vpcLinkId}
        requestParameters:
          integration.request.header.Access-Control-Allow-Headers: "'*'"
          integration.request.header.Access-Control-Allow-Origin: "'*'"
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.querystring.shared: method.request.querystring.shared
          integration.request.querystring.sharingUid: method.request.querystring.sharingUid
        responses:
          200:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          500:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
    post:
      tags:
        - Insurance
      description: Create new insurance
      summary: Create new insurance
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/xApiKey"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InsuranceRequest"
      responses:
        201:
          description: Create insurance successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InsuranceResponse"
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      security:
        - GoBanyanAuthorizer: []
          api_key: []
      x-amazon-apigateway-integration:
        type: http
        passthroughBehavior: "when_no_match"
        httpMethod: POST
        uri: http://${stageVariables.apiLink}/api/v1/insurances
        connectionType: "VPC_LINK"
        connectionId: ${stageVariables.vpcLinkId}
        requestParameters:
          integration.request.header.Access-Control-Allow-Headers: "'*'"
          integration.request.header.Access-Control-Allow-Origin: "'*'"
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.x-api-key: method.request.header.x-api-key
        responses:
          201:
            statusCode: 201
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          500:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
    options:
      tags:
        - Insurance
      summary: CORS support
      description: Enable CORS by returning correct headers
      parameters: []
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
      x-amazon-apigateway-integration:
        type: "mock"
        requestTemplates:
          application/json: "{\n  \"statusCode\" : 201\n}\n"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{}\n"
  /insurances/{id}:
    get:
      tags:
        - Insurance
      description: Get insurance by id
      summary: Get insurance by id
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/xApiKey"
        - $ref: "#/components/parameters/objectId"
        - $ref: "#/components/parameters/shared"
        - $ref: "#/components/parameters/sharingUid"
      responses:
        200:
          description: The insurance by id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InsuranceResponse"
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      security:
        - GoBanyanAuthorizer: []
          api_key: []
      x-amazon-apigateway-integration:
        type: http
        passthroughBehavior: "when_no_match"
        httpMethod: GET
        uri: http://${stageVariables.apiLink}/api/v1/insurances/{id}
        connectionType: "VPC_LINK"
        connectionId: ${stageVariables.vpcLinkId}
        requestParameters:
          integration.request.header.Access-Control-Allow-Headers: "'*'"
          integration.request.header.Access-Control-Allow-Origin: "'*'"
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.path.id: method.request.path.id
          integration.request.querystring.shared: method.request.querystring.shared
          integration.request.querystring.sharingUid: method.request.querystring.sharingUid
        responses:
          200:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          500:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
    put:
      tags:
        - Insurance
      description: Update a Insuranci
      summary: Update a insurance
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/xApiKey"
        - $ref: "#/components/parameters/objectId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InsuranceRequest"
      responses:
        200:
          description: The updated insurance
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InsuranceResponse"
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      security:
        - GoBanyanAuthorizer: []
          api_key: []
      x-amazon-apigateway-integration:
        type: http
        passthroughBehavior: "when_no_match"
        httpMethod: PUT
        uri: http://${stageVariables.apiLink}/api/v1/insurances/{id}
        connectionType: "VPC_LINK"
        connectionId: ${stageVariables.vpcLinkId}
        requestParameters:
          integration.request.header.Access-Control-Allow-Headers: "'*'"
          integration.request.header.Access-Control-Allow-Origin: "'*'"
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.path.id: method.request.path.id
        responses:
          200:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          500:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
    options:
      tags:
        - Insurance
      summary: CORS support
      description: Enable CORS by returning correct headers
      parameters:
        - $ref: "#/components/parameters/objectId"
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
      x-amazon-apigateway-integration:
        type: "mock"
        requestTemplates:
          application/json: "{\n  \"statusCode\" : 201\n}\n"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{}\n"
  /passports:
    get:
      tags:
        - Passport
      description: Get list of passports
      summary: Get list of passports
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/xApiKey"
        - $ref: "#/components/parameters/shared"
        - $ref: "#/components/parameters/sharingUid"
      responses:
        200:
          description: The list of passports
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PassportResponses"
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      security:
        - GoBanyanAuthorizer: []
          api_key: []
      x-amazon-apigateway-integration:
        type: http
        passthroughBehavior: "when_no_match"
        httpMethod: GET
        uri: http://${stageVariables.apiLink}/api/v1/passports
        connectionType: "VPC_LINK"
        connectionId: ${stageVariables.vpcLinkId}
        requestParameters:
          integration.request.header.Access-Control-Allow-Headers: "'*'"
          integration.request.header.Access-Control-Allow-Origin: "'*'"
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.querystring.shared: method.request.querystring.shared
          integration.request.querystring.sharingUid: method.request.querystring.sharingUid
        responses:
          200:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          500:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
    post:
      tags:
        - Passport
      description: Create new passport
      summary: Create new passport
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/xApiKey"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PassportRequest"
      responses:
        201:
          description: Create passport successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PassportResponse"
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      security:
        - GoBanyanAuthorizer: []
          api_key: []
      x-amazon-apigateway-integration:
        type: http
        passthroughBehavior: "when_no_match"
        httpMethod: POST
        uri: http://${stageVariables.apiLink}/api/v1/passports
        connectionType: "VPC_LINK"
        connectionId: ${stageVariables.vpcLinkId}
        requestParameters:
          integration.request.header.Access-Control-Allow-Headers: "'*'"
          integration.request.header.Access-Control-Allow-Origin: "'*'"
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.x-api-key: method.request.header.x-api-key
        responses:
          201:
            statusCode: 201
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          500:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
    options:
      tags:
        - Passport
      summary: CORS support
      description: Enable CORS by returning correct headers
      parameters: []
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
      x-amazon-apigateway-integration:
        type: "mock"
        requestTemplates:
          application/json: "{\n  \"statusCode\" : 201\n}\n"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{}\n"
  /passports/{id}:
    get:
      tags:
        - Passport
      description: Get passport by id
      summary: Get passport by id
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/xApiKey"
        - $ref: "#/components/parameters/objectId"
        - $ref: "#/components/parameters/shared"
        - $ref: "#/components/parameters/sharingUid"
      responses:
        200:
          description: The passport by id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PassportResponse"
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      security:
        - GoBanyanAuthorizer: []
          api_key: []
      x-amazon-apigateway-integration:
        type: http
        passthroughBehavior: "when_no_match"
        httpMethod: GET
        uri: http://${stageVariables.apiLink}/api/v1/passports/{id}
        connectionType: "VPC_LINK"
        connectionId: ${stageVariables.vpcLinkId}
        requestParameters:
          integration.request.header.Access-Control-Allow-Headers: "'*'"
          integration.request.header.Access-Control-Allow-Origin: "'*'"
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.path.id: method.request.path.id
          integration.request.querystring.shared: method.request.querystring.shared
          integration.request.querystring.sharingUid: method.request.querystring.sharingUid
        responses:
          200:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          500:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
    put:
      tags:
        - Passport
      description: Update a passport
      summary: Update a passport
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/xApiKey"
        - $ref: "#/components/parameters/objectId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PassportRequest"
      responses:
        200:
          description: The updated passport
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PassportResponse"
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      security:
        - GoBanyanAuthorizer: []
          api_key: []
      x-amazon-apigateway-integration:
        type: http
        passthroughBehavior: "when_no_match"
        httpMethod: PUT
        uri: http://${stageVariables.apiLink}/api/v1/passports/{id}
        connectionType: "VPC_LINK"
        connectionId: ${stageVariables.vpcLinkId}
        requestParameters:
          integration.request.header.Access-Control-Allow-Headers: "'*'"
          integration.request.header.Access-Control-Allow-Origin: "'*'"
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.path.id: method.request.path.id
        responses:
          200:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          500:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
    options:
      tags:
        - Passport
      summary: CORS support
      description: Enable CORS by returning correct headers
      parameters:
        - $ref: "#/components/parameters/objectId"
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
      x-amazon-apigateway-integration:
        type: "mock"
        requestTemplates:
          application/json: "{\n  \"statusCode\" : 201\n}\n"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{}\n"
  /proLicenses:
    get:
      tags:
        - ProLicense
      description: Get list of proLicenses
      summary: Get list of proLicenses
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/xApiKey"
        - $ref: "#/components/parameters/shared"
        - $ref: "#/components/parameters/sharingUid"
      responses:
        200:
          description: The list of proLicenses
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProLicenseResponses"
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      security:
        - GoBanyanAuthorizer: []
          api_key: []
      x-amazon-apigateway-integration:
        type: http
        passthroughBehavior: "when_no_match"
        httpMethod: GET
        uri: http://${stageVariables.apiLink}/api/v1/proLicenses
        connectionType: "VPC_LINK"
        connectionId: ${stageVariables.vpcLinkId}
        requestParameters:
          integration.request.header.Access-Control-Allow-Headers: "'*'"
          integration.request.header.Access-Control-Allow-Origin: "'*'"
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.querystring.shared: method.request.querystring.shared
          integration.request.querystring.sharingUid: method.request.querystring.sharingUid
        responses:
          200:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          500:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
    post:
      tags:
        - ProLicense
      description: Create new proLicense
      summary: Create new proLicense
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/xApiKey"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProLicenseRequest"
      responses:
        201:
          description: Create proLicense successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProLicenseResponse"
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      security:
        - GoBanyanAuthorizer: []
          api_key: []
      x-amazon-apigateway-integration:
        type: http
        passthroughBehavior: "when_no_match"
        httpMethod: POST
        uri: http://${stageVariables.apiLink}/api/v1/proLicenses
        connectionType: "VPC_LINK"
        connectionId: ${stageVariables.vpcLinkId}
        requestParameters:
          integration.request.header.Access-Control-Allow-Headers: "'*'"
          integration.request.header.Access-Control-Allow-Origin: "'*'"
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.x-api-key: method.request.header.x-api-key
        responses:
          201:
            statusCode: 201
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          500:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
    options:
      tags:
        - ProLicense
      summary: CORS support
      description: Enable CORS by returning correct headers
      parameters: []
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
      x-amazon-apigateway-integration:
        type: "mock"
        requestTemplates:
          application/json: "{\n  \"statusCode\" : 201\n}\n"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{}\n"
  /proLicenses/{id}:
    get:
      tags:
        - ProLicense
      description: Get proLicense by id
      summary: Get proLicense by id
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/xApiKey"
        - $ref: "#/components/parameters/objectId"
        - $ref: "#/components/parameters/shared"
        - $ref: "#/components/parameters/sharingUid"
      responses:
        200:
          description: The proLicense by id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProLicenseResponse"
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      security:
        - GoBanyanAuthorizer: []
          api_key: []
      x-amazon-apigateway-integration:
        type: http
        passthroughBehavior: "when_no_match"
        httpMethod: GET
        uri: http://${stageVariables.apiLink}/api/v1/proLicenses/{id}
        connectionType: "VPC_LINK"
        connectionId: ${stageVariables.vpcLinkId}
        requestParameters:
          integration.request.header.Access-Control-Allow-Headers: "'*'"
          integration.request.header.Access-Control-Allow-Origin: "'*'"
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.path.id: method.request.path.id
          integration.request.querystring.shared: method.request.querystring.shared
          integration.request.querystring.sharingUid: method.request.querystring.sharingUid
        responses:
          200:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          500:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
    put:
      tags:
        - ProLicense
      description: Update a proLicense
      summary: Update a proLicense
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/xApiKey"
        - $ref: "#/components/parameters/objectId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProLicenseRequest"
      responses:
        200:
          description: The updated proLicense
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProLicenseResponse"
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      security:
        - GoBanyanAuthorizer: []
          api_key: []
      x-amazon-apigateway-integration:
        type: http
        passthroughBehavior: "when_no_match"
        httpMethod: PUT
        uri: http://${stageVariables.apiLink}/api/v1/proLicenses/{id}
        connectionType: "VPC_LINK"
        connectionId: ${stageVariables.vpcLinkId}
        requestParameters:
          integration.request.header.Access-Control-Allow-Headers: "'*'"
          integration.request.header.Access-Control-Allow-Origin: "'*'"
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.path.id: method.request.path.id
        responses:
          200:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          500:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
    options:
      tags:
        - ProLicense
      summary: CORS support
      description: Enable CORS by returning correct headers
      parameters:
        - $ref: "#/components/parameters/objectId"
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
      x-amazon-apigateway-integration:
        type: "mock"
        requestTemplates:
          application/json: "{\n  \"statusCode\" : 201\n}\n"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{}\n"
  /softwares:
    get:
      tags:
        - Software
      description: Get list of softwares
      summary: Get list of softwares
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/xApiKey"
        - $ref: "#/components/parameters/shared"
        - $ref: "#/components/parameters/sharingUid"
      responses:
        200:
          description: The list of softwares
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SoftwareResponses"
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      security:
        - GoBanyanAuthorizer: []
          api_key: []
      x-amazon-apigateway-integration:
        type: http
        passthroughBehavior: "when_no_match"
        httpMethod: GET
        uri: http://${stageVariables.apiLink}/api/v1/softwares
        connectionType: "VPC_LINK"
        connectionId: ${stageVariables.vpcLinkId}
        requestParameters:
          integration.request.header.Access-Control-Allow-Headers: "'*'"
          integration.request.header.Access-Control-Allow-Origin: "'*'"
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.querystring.shared: method.request.querystring.shared
          integration.request.querystring.sharingUid: method.request.querystring.sharingUid
        responses:
          200:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          500:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
    post:
      tags:
        - Software
      description: Create new software
      summary: Create new software
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/xApiKey"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SoftwareRequest"
      responses:
        201:
          description: Create software successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SoftwareResponse"
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      security:
        - GoBanyanAuthorizer: []
          api_key: []
      x-amazon-apigateway-integration:
        type: http
        passthroughBehavior: "when_no_match"
        httpMethod: POST
        uri: http://${stageVariables.apiLink}/api/v1/softwares
        connectionType: "VPC_LINK"
        connectionId: ${stageVariables.vpcLinkId}
        requestParameters:
          integration.request.header.Access-Control-Allow-Headers: "'*'"
          integration.request.header.Access-Control-Allow-Origin: "'*'"
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.x-api-key: method.request.header.x-api-key
        responses:
          201:
            statusCode: 201
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          500:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
    options:
      tags:
        - Software
      summary: CORS support
      description: Enable CORS by returning correct headers
      parameters: []
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
      x-amazon-apigateway-integration:
        type: "mock"
        requestTemplates:
          application/json: "{\n  \"statusCode\" : 201\n}\n"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{}\n"
  /softwares/{id}:
    get:
      tags:
        - Software
      description: Get software by id
      summary: Get software by id
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/xApiKey"
        - $ref: "#/components/parameters/objectId"
        - $ref: "#/components/parameters/shared"
        - $ref: "#/components/parameters/sharingUid"
      responses:
        200:
          description: The software by id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SoftwareResponse"
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      security:
        - GoBanyanAuthorizer: []
          api_key: []
      x-amazon-apigateway-integration:
        type: http
        passthroughBehavior: "when_no_match"
        httpMethod: GET
        uri: http://${stageVariables.apiLink}/api/v1/softwares/{id}
        connectionType: "VPC_LINK"
        connectionId: ${stageVariables.vpcLinkId}
        requestParameters:
          integration.request.header.Access-Control-Allow-Headers: "'*'"
          integration.request.header.Access-Control-Allow-Origin: "'*'"
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.path.id: method.request.path.id
          integration.request.querystring.shared: method.request.querystring.shared
          integration.request.querystring.sharingUid: method.request.querystring.sharingUid
        responses:
          200:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          500:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
    put:
      tags:
        - Software
      description: Update a software
      summary: Update a software
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/xApiKey"
        - $ref: "#/components/parameters/objectId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SoftwareRequest"
      responses:
        200:
          description: The updated software
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SoftwareResponse"
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      security:
        - GoBanyanAuthorizer: []
          api_key: []
      x-amazon-apigateway-integration:
        type: http
        passthroughBehavior: "when_no_match"
        httpMethod: PUT
        uri: http://${stageVariables.apiLink}/api/v1/softwares/{id}
        connectionType: "VPC_LINK"
        connectionId: ${stageVariables.vpcLinkId}
        requestParameters:
          integration.request.header.Access-Control-Allow-Headers: "'*'"
          integration.request.header.Access-Control-Allow-Origin: "'*'"
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.path.id: method.request.path.id
        responses:
          200:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          500:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
    options:
      tags:
        - Software
      summary: CORS support
      description: Enable CORS by returning correct headers
      parameters:
        - $ref: "#/components/parameters/objectId"
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
      x-amazon-apigateway-integration:
        type: "mock"
        requestTemplates:
          application/json: "{\n  \"statusCode\" : 201\n}\n"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{}\n"
  /ssns:
    get:
      tags:
        - Ssn
      description: Get list of ssns
      summary: Get list of ssns
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/xApiKey"
        - $ref: "#/components/parameters/shared"
        - $ref: "#/components/parameters/sharingUid"
      responses:
        200:
          description: The list of ssns
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SsnResponses"
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      security:
        - GoBanyanAuthorizer: []
          api_key: []
      x-amazon-apigateway-integration:
        type: http
        passthroughBehavior: "when_no_match"
        httpMethod: GET
        uri: http://${stageVariables.apiLink}/api/v1/ssns
        connectionType: "VPC_LINK"
        connectionId: ${stageVariables.vpcLinkId}
        requestParameters:
          integration.request.header.Access-Control-Allow-Headers: "'*'"
          integration.request.header.Access-Control-Allow-Origin: "'*'"
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.querystring.shared: method.request.querystring.shared
          integration.request.querystring.sharingUid: method.request.querystring.sharingUid
        responses:
          200:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          500:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
    post:
      tags:
        - Ssn
      description: Create new ssn
      summary: Create new ssn
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/xApiKey"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SsnRequest"
      responses:
        201:
          description: Create ssn successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SsnResponse"
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      security:
        - GoBanyanAuthorizer: []
          api_key: []
      x-amazon-apigateway-integration:
        type: http
        passthroughBehavior: "when_no_match"
        httpMethod: POST
        uri: http://${stageVariables.apiLink}/api/v1/ssns
        connectionType: "VPC_LINK"
        connectionId: ${stageVariables.vpcLinkId}
        requestParameters:
          integration.request.header.Access-Control-Allow-Headers: "'*'"
          integration.request.header.Access-Control-Allow-Origin: "'*'"
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.x-api-key: method.request.header.x-api-key
        responses:
          201:
            statusCode: 201
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          500:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
    options:
      tags:
        - Ssn
      summary: CORS support
      description: Enable CORS by returning correct headers
      parameters: []
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
      x-amazon-apigateway-integration:
        type: "mock"
        requestTemplates:
          application/json: "{\n  \"statusCode\" : 201\n}\n"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{}\n"
  /ssns/{id}:
    get:
      tags:
        - Ssn
      description: Get ssn by id
      summary: Get ssn by id
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/xApiKey"
        - $ref: "#/components/parameters/objectId"
        - $ref: "#/components/parameters/shared"
        - $ref: "#/components/parameters/sharingUid"
      responses:
        200:
          description: The ssn by id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SsnResponse"
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      security:
        - GoBanyanAuthorizer: []
          api_key: []
      x-amazon-apigateway-integration:
        type: http
        passthroughBehavior: "when_no_match"
        httpMethod: GET
        uri: http://${stageVariables.apiLink}/api/v1/ssns/{id}
        connectionType: "VPC_LINK"
        connectionId: ${stageVariables.vpcLinkId}
        requestParameters:
          integration.request.header.Access-Control-Allow-Headers: "'*'"
          integration.request.header.Access-Control-Allow-Origin: "'*'"
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.path.id: method.request.path.id
          integration.request.querystring.shared: method.request.querystring.shared
          integration.request.querystring.sharingUid: method.request.querystring.sharingUid
        responses:
          200:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          500:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
    put:
      tags:
        - Ssn
      description: Update a ssn
      summary: Update a ssn
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/xApiKey"
        - $ref: "#/components/parameters/objectId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SsnRequest"
      responses:
        200:
          description: The updated ssn
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SsnResponse"
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      security:
        - GoBanyanAuthorizer: []
          api_key: []
      x-amazon-apigateway-integration:
        type: http
        passthroughBehavior: "when_no_match"
        httpMethod: PUT
        uri: http://${stageVariables.apiLink}/api/v1/ssns/{id}
        connectionType: "VPC_LINK"
        connectionId: ${stageVariables.vpcLinkId}
        requestParameters:
          integration.request.header.Access-Control-Allow-Headers: "'*'"
          integration.request.header.Access-Control-Allow-Origin: "'*'"
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.path.id: method.request.path.id
        responses:
          200:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          500:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
    options:
      tags:
        - Ssn
      summary: CORS support
      description: Enable CORS by returning correct headers
      parameters:
        - $ref: "#/components/parameters/objectId"
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
      x-amazon-apigateway-integration:
        type: "mock"
        requestTemplates:
          application/json: "{\n  \"statusCode\" : 201\n}\n"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{}\n"
  /rewardsPrograms:
    get:
      tags:
        - RewardsProgram
      description: Get list of rewardsPrograms
      summary: Get list of rewardsPrograms
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/xApiKey"
        - $ref: "#/components/parameters/shared"
        - $ref: "#/components/parameters/sharingUid"
      responses:
        200:
          description: The list of rewardsPrograms
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RewardsProgramResponses"
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      security:
        - GoBanyanAuthorizer: []
          api_key: []
      x-amazon-apigateway-integration:
        type: http
        passthroughBehavior: "when_no_match"
        httpMethod: GET
        uri: http://${stageVariables.apiLink}/api/v1/rewardsPrograms
        connectionType: "VPC_LINK"
        connectionId: ${stageVariables.vpcLinkId}
        requestParameters:
          integration.request.header.Access-Control-Allow-Headers: "'*'"
          integration.request.header.Access-Control-Allow-Origin: "'*'"
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.querystring.shared: method.request.querystring.shared
          integration.request.querystring.sharingUid: method.request.querystring.sharingUid
        responses:
          200:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          500:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
    post:
      tags:
        - RewardsProgram
      description: Create new rewardsProgram
      summary: Create new rewardsProgram
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/xApiKey"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RewardsProgramRequest"
      responses:
        201:
          description: Create rewardsProgram successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RewardsProgramResponse"
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      security:
        - GoBanyanAuthorizer: []
          api_key: []
      x-amazon-apigateway-integration:
        type: http
        passthroughBehavior: "when_no_match"
        httpMethod: POST
        uri: http://${stageVariables.apiLink}/api/v1/rewardsPrograms
        connectionType: "VPC_LINK"
        connectionId: ${stageVariables.vpcLinkId}
        requestParameters:
          integration.request.header.Access-Control-Allow-Headers: "'*'"
          integration.request.header.Access-Control-Allow-Origin: "'*'"
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.x-api-key: method.request.header.x-api-key
        responses:
          201:
            statusCode: 201
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          500:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
    options:
      tags:
        - RewardsProgram
      summary: CORS support
      description: Enable CORS by returning correct headers
      parameters: []
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
      x-amazon-apigateway-integration:
        type: "mock"
        requestTemplates:
          application/json: "{\n  \"statusCode\" : 201\n}\n"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{}\n"
  /rewardsPrograms/{id}:
    get:
      tags:
        - RewardsProgram
      description: Get rewardsProgram by id
      summary: Get rewardsProgram by id
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/xApiKey"
        - $ref: "#/components/parameters/objectId"
        - $ref: "#/components/parameters/shared"
        - $ref: "#/components/parameters/sharingUid"
      responses:
        200:
          description: The rewardsProgram by id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RewardsProgramResponse"
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      security:
        - GoBanyanAuthorizer: []
          api_key: []
      x-amazon-apigateway-integration:
        type: http
        passthroughBehavior: "when_no_match"
        httpMethod: GET
        uri: http://${stageVariables.apiLink}/api/v1/rewardsPrograms/{id}
        connectionType: "VPC_LINK"
        connectionId: ${stageVariables.vpcLinkId}
        requestParameters:
          integration.request.header.Access-Control-Allow-Headers: "'*'"
          integration.request.header.Access-Control-Allow-Origin: "'*'"
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.path.id: method.request.path.id
          integration.request.querystring.shared: method.request.querystring.shared
          integration.request.querystring.sharingUid: method.request.querystring.sharingUid
        responses:
          200:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          500:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
    put:
      tags:
        - RewardsProgram
      description: Update a rewardsProgram
      summary: Update a rewardsProgram
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/xApiKey"
        - $ref: "#/components/parameters/objectId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RewardsProgramRequest"
      responses:
        200:
          description: The updated rewardsProgram
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RewardsProgramResponse"
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalError"
      security:
        - GoBanyanAuthorizer: []
          api_key: []
      x-amazon-apigateway-integration:
        type: http
        passthroughBehavior: "when_no_match"
        httpMethod: PUT
        uri: http://${stageVariables.apiLink}/api/v1/rewardsPrograms/{id}
        connectionType: "VPC_LINK"
        connectionId: ${stageVariables.vpcLinkId}
        requestParameters:
          integration.request.header.Access-Control-Allow-Headers: "'*'"
          integration.request.header.Access-Control-Allow-Origin: "'*'"
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.path.id: method.request.path.id
        responses:
          200:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          400:
            statusCode: 400
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          404:
            statusCode: 404
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
          500:
            statusCode: 500
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key,content-encoding'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'No-Cache'"
    options:
      tags:
        - RewardsProgram
      summary: CORS support
      description: Enable CORS by returning correct headers
      parameters:
        - $ref: "#/components/parameters/objectId"
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Expose-Headers:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Methods:
              $ref: "#/components/headers/ControlHeaders"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/ControlHeaders"
            Cache-Control:
              $ref: "#/components/headers/ControlHeaders"
      x-amazon-apigateway-integration:
        type: "mock"
        requestTemplates:
          application/json: "{\n  \"statusCode\" : 201\n}\n"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{}\n"
components:
  securitySchemes:
    api_key:
      type: "apiKey"
      name: "x-api-key"
      in: "header"
    GoBanyanAuthorizer:
      type: "apiKey"
      name: "Authorization"
      in: "header"
      x-amazon-apigateway-authtype: "custom"
      x-amazon-apigateway-authorizer:
        authorizerCredentials: "arn:aws:iam::013666095363:role/${stageVariables.lambdaAuthorizerInvokeRole}"
        authorizerUri: "arn:aws:apigateway:us-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-1:013666095363:function:${stageVariables.lambdaAuthorizer}-${stageVariables.lambdaAuthorizerAlias}/invocations"
        authorizerResultTtlInSeconds: 0
        identitySource: "method.request.header.Authorization"
        type: "request"
  headers:
    ControlHeaders:
      schema:
        type: "string"
  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
      headers:
        Access-Control-Allow-Headers:
          $ref: "#/components/headers/ControlHeaders"
        Access-Control-Expose-Headers:
          $ref: "#/components/headers/ControlHeaders"
        Access-Control-Allow-Methods:
          $ref: "#/components/headers/ControlHeaders"
        Access-Control-Allow-Origin:
          $ref: "#/components/headers/ControlHeaders"
        Cache-Control:
          $ref: "#/components/headers/ControlHeaders"
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
      headers:
        Access-Control-Allow-Headers:
          $ref: "#/components/headers/ControlHeaders"
        Access-Control-Expose-Headers:
          $ref: "#/components/headers/ControlHeaders"
        Access-Control-Allow-Methods:
          $ref: "#/components/headers/ControlHeaders"
        Access-Control-Allow-Origin:
          $ref: "#/components/headers/ControlHeaders"
        Cache-Control:
          $ref: "#/components/headers/ControlHeaders"
    InternalError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
      headers:
        Access-Control-Allow-Headers:
          $ref: "#/components/headers/ControlHeaders"
        Access-Control-Expose-Headers:
          $ref: "#/components/headers/ControlHeaders"
        Access-Control-Allow-Methods:
          $ref: "#/components/headers/ControlHeaders"
        Access-Control-Allow-Origin:
          $ref: "#/components/headers/ControlHeaders"
        Cache-Control:
          $ref: "#/components/headers/ControlHeaders"
  parameters:
    Authorization:
      in: header
      name: Authorization
      description: Authorization token
      required: true
      schema:
        type: string
    xApiKey:
      in: header
      name: x-api-key
      description: x-api-key
      required: false
      schema:
        type: string
    objectId:
      in: path
      name: id
      description: The object id
      required: true
      schema:
        type: string
    shared:
      in: query
      name: shared
      description: Is shared mode
      schema:
        type: boolean
    sharingUid:
      in: query
      name: sharingUid
      description: The sharing user uid
      schema:
        type: string
  schemas:
    Media:
      type: object
      required:
        - name
        - originalName
      properties:
        name:
          type: string
          description: The name
        originalName:
          type: string
          description: The original name
    ShareUser:
      type: object
      properties:
        uid:
          type: string
          description: The uid
        email:
          type: string
          description: The email
    BasicObject:
      type: object
      properties:
        _id:
          type: string
          description: The id
        uid:
          type: string
          description: The user uid
        modifiedAt:
          type: string
          format: date
          description: The modified at
        createdAt:
          type: string
          format: date
          description: The created at
        sharings:
          type: array
          description: The sharing users
          items:
            $ref: "#/components/schemas/ShareUser"
    CommonObject:
      type: object
      properties:
        status:
          type: string
          description: The status
        notes:
          type: string
          description: The notes
        medias:
          type: array
          description: List of medias
          items:
            $ref: "#/components/schemas/Media"
        metadata:
          type: array
          description: The metadata
          items:
            type: object
    ReponseObject:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          description: The status
    AirTravelClearanceRequest:
      allOf:
        - $ref: "#/components/schemas/CommonObject"
        - type: object
          required:
            - fullName
            - clearenceType
            - clearenceNumber
            - renewalDate
            - idLocation
            - docLocation
          properties:
            fullName:
              type: string
              description: The name on air travel clearance
            clearenceType:
              type: string
              description: The clearence type
            clearenceNumber:
              type: integer
              format: int64
              description: The clearence number
            renewalDate:
              type: string
              description: The renewal date
            idLocation:
              type: string
              description: From
            docLocation:
              type: string
              description: The doc location
    AirTravelClearance:
      allOf:
        - $ref: "#/components/schemas/AirTravelClearanceRequest"
        - $ref: "#/components/schemas/BasicObject"
    AirTravelClearanceResponses:
      allOf:
        - $ref: "#/components/schemas/ReponseObject"
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/AirTravelClearance"
    AirTravelClearanceResponse:
      allOf:
        - $ref: "#/components/schemas/ReponseObject"
        - type: object
          required:
            - data
          properties:
            data:
              $ref: "#/components/schemas/AirTravelClearance"
    BirthCertRequest:
      allOf:
        - $ref: "#/components/schemas/CommonObject"
        - type: object
          required:
            - nameOnCert
            - dateOfBirth
            - placeOfBirth
            - hospitalLocation
            - docLocation
          properties:
            nameOnCert:
              type: string
              description: The name on birth certificate
            dateOfBirth:
              type: string
              description: The date of birth
            placeOfBirth:
              type: string
              description: The place of birth
            hospitalLocation:
              type: string
              description: The hospital location
            docLocation:
              type: string
              description: The doc location
    BirthCert:
      allOf:
        - $ref: "#/components/schemas/BirthCertRequest"
        - $ref: "#/components/schemas/BasicObject"
    BirthCertResponses:
      allOf:
        - $ref: "#/components/schemas/ReponseObject"
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/BirthCert"
    BirthCertResponse:
      allOf:
        - $ref: "#/components/schemas/ReponseObject"
        - type: object
          required:
            - data
          properties:
            data:
              $ref: "#/components/schemas/BirthCert"
    DeviceRequest:
      allOf:
        - $ref: "#/components/schemas/CommonObject"
        - type: object
          required:
            - name
            - deviceType
            - model
            - docLocation
          properties:
            name:
              type: string
              description: The name
            deviceType:
              type: string
              description: The device type
            model:
              type: string
              description: The model
            location:
              type: string
              description: The location
            passcode:
              type: string
              description: The passcode
            username:
              type: string
              description: The username
            password:
              type: string
              description: The password
            docLocation:
              type: string
              description: The doc location
    Device:
      allOf:
        - $ref: "#/components/schemas/DeviceRequest"
        - $ref: "#/components/schemas/BasicObject"
    DeviceResponses:
      allOf:
        - $ref: "#/components/schemas/ReponseObject"
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/Device"
    DeviceResponse:
      allOf:
        - $ref: "#/components/schemas/ReponseObject"
        - type: object
          required:
            - data
          properties:
            data:
              $ref: "#/components/schemas/Device"
    MedicareRequest:
      allOf:
        - $ref: "#/components/schemas/CommonObject"
        - type: object
          required:
            - fullName
            - medicareNo
            - cardLocation
            - docLocation
          properties:
            fullName:
              type: string
              description: The full name
            medicareNo:
              type: string
              description: The medicare number
            cardLocation:
              type: string
              description: The card location
            docLocation:
              type: string
              description: The doc location
    Medicare:
      allOf:
        - $ref: "#/components/schemas/MedicareRequest"
        - $ref: "#/components/schemas/BasicObject"
    MedicareResponses:
      allOf:
        - $ref: "#/components/schemas/ReponseObject"
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/Medicare"
    MedicareResponse:
      allOf:
        - $ref: "#/components/schemas/ReponseObject"
        - type: object
          required:
            - data
          properties:
            data:
              $ref: "#/components/schemas/Medicare"
    NaturalizationRequest:
      allOf:
        - $ref: "#/components/schemas/CommonObject"
        - type: object
          required:
            - countryOfOrigin
            - dateOfNaturalization
            - docLocation
          properties:
            countryOfOrigin:
              type: string
              description: The country Of origin
            dateOfNaturalization:
              type: string
              description: The dateOf naturalization
            docLocation:
              type: string
              description: The doc location
    Naturalization:
      allOf:
        - $ref: "#/components/schemas/NaturalizationRequest"
        - $ref: "#/components/schemas/BasicObject"
    NaturalizationResponses:
      allOf:
        - $ref: "#/components/schemas/ReponseObject"
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/Naturalization"
    NaturalizationResponse:
      allOf:
        - $ref: "#/components/schemas/ReponseObject"
        - type: object
          required:
            - data
          properties:
            data:
              $ref: "#/components/schemas/Naturalization"
    Question:
      type: object
      required:
        - question
      properties:
        question:
          type: string
          description: The question
        answer:
          type: string
          description: The answer
    OnlineAccountRequest:
      allOf:
        - $ref: "#/components/schemas/CommonObject"
        - type: object
          required:
            - name
            - renewlDate
          properties:
            name:
              type: string
              description: The name
            serviceType:
              type: string
              description: The service type
            url:
              type: string
              description: The url
            supportPhone:
              type: string
              description: The support phone
            username:
              type: string
              description: The username
            password:
              type: string
              description: The password
            securityQuestions:
              type: array
              description: The security questions
              items:
                $ref: "#/components/schemas/Question"
            monthlyFee:
              type: integer
              format: int64
              description: The monthly fee
            annualFee:
              type: integer
              format: int64
              description: The monthly fee
            renewlDate:
              type: string
              format: date
              description: The renewl date
    OnlineAccount:
      allOf:
        - $ref: "#/components/schemas/OnlineAccountRequest"
        - $ref: "#/components/schemas/BasicObject"
    OnlineAccountResponses:
      allOf:
        - $ref: "#/components/schemas/ReponseObject"
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/OnlineAccount"
    OnlineAccountResponse:
      allOf:
        - $ref: "#/components/schemas/ReponseObject"
        - type: object
          required:
            - data
          properties:
            data:
              $ref: "#/components/schemas/OnlineAccount"
    MerchantAccountRequest:
      allOf:
        - $ref: "#/components/schemas/CommonObject"
        - type: object
          required:
            - merchantName
            - merchantType
            - transactionMethod
            - customerServiceRep
            - customerServicePhone
            - customerServiceEmail
            - docLocation
          properties:
            merchantName:
              type: string
              description: The merchant name
            merchantType:
              type: string
              description: The merchant type
            url:
              type: string
              description: The url
            transactionMethod:
              type: string
              description: The transaction method
            nameOnAccount:
              type: string
              description: The name on account
            accountNumber:
              type: string
              description: The account number
            username:
              type: string
              description: The username
            password:
              type: string
              description: The password
            pinNumber:
              type: string
              description: The pin number
            securityQuestions:
              type: array
              description: The security questions
              items:
                $ref: "#/components/schemas/Question"
            monthlyFee:
              type: integer
              format: int64
              description: The monthly fee
            annualFee:
              type: integer
              format: int64
              description: The monthly fee
            customerServiceRep:
              type: string
              description: The customer service representative
            customerServicePhone:
              type: string
              description: The customer service phone
            customerServiceEmail:
              type: string
              description: The customer service email
            contactId:
              type: string
              description: The contact id
            docLocation:
              type: string
              description: The doc location
    MerchantAccount:
      allOf:
        - $ref: "#/components/schemas/MerchantAccountRequest"
        - $ref: "#/components/schemas/BasicObject"
    MerchantAccountResponses:
      allOf:
        - $ref: "#/components/schemas/ReponseObject"
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/MerchantAccount"
    MerchantAccountResponse:
      allOf:
        - $ref: "#/components/schemas/ReponseObject"
        - type: object
          required:
            - data
          properties:
            data:
              $ref: "#/components/schemas/MerchantAccount"
    BankAccountRequest:
      allOf:
        - $ref: "#/components/schemas/CommonObject"
        - type: object
          required:
            - accountType
            - bankName
            - docLocation
          properties:
            accountType:
              type: string
              description: The account type
            bankName:
              type: string
              description: The bank name
            branchLocation:
              type: string
              description: The branch location
            url:
              type: string
              description: The url
            website:
              type: string
              description: The website
            nameOnAccount:
              type: string
              description: The name on account
            accountNumber:
              type: string
              description: The account number
            routingNumber:
              type: string
              description: The routing number
            username:
              type: string
              description: The username
            password:
              type: string
              description: The password
            pinNumber:
              type: string
              description: The pin number
            securityQuestions:
              type: array
              description: The security questions
              items:
                $ref: "#/components/schemas/Question"
            monthlyFee:
              type: integer
              format: int64
              description: The monthly fee
            contactId:
              type: string
              description: The contact id
            beneficaries:
              type: array
              description: The beneficaries
              items:
                type: string
            docLocation:
              type: string
              description: The doc location
    BankAccount:
      allOf:
        - $ref: "#/components/schemas/BankAccountRequest"
        - $ref: "#/components/schemas/BasicObject"
    BankAccountResponses:
      allOf:
        - $ref: "#/components/schemas/ReponseObject"
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/BankAccount"
    BankAccountResponse:
      allOf:
        - $ref: "#/components/schemas/ReponseObject"
        - type: object
          required:
            - data
          properties:
            data:
              $ref: "#/components/schemas/BankAccount"
    BankCardRequest:
      allOf:
        - $ref: "#/components/schemas/CommonObject"
        - type: object
          required:
            - cardType
            - company
            - bankName
            - docLocation
          properties:
            cardType:
              type: string
              description: The card type
            company:
              type: string
              description: The company
            bankName:
              type: string
              description: The bank name
            branchLocation:
              type: string
              description: The branch location
            nameOnCard:
              type: string
              description: The name on card
            otherName:
              type: string
              description: The other name
            cardNumber:
              type: string
              description: The card number
            expiredDate:
              type: string
              format: date
              description: The expired date
            securityCode:
              type: string
              description: The security code
            website:
              type: string
              description: The website
            supportPhone:
              type: string
              description: The support phone
            url:
              type: string
              description: The url
            bankAccount:
              type: string
              description: The bank account
            username:
              type: string
              description: The username
            password:
              type: string
              description: The password
            pinNumber:
              type: string
              description: The pin number
            securityQuestions:
              type: array
              description: The security questions
              items:
                $ref: "#/components/schemas/Question"
            monthlyFee:
              type: integer
              format: int64
              description: The monthly fee
            contactId:
              type: string
              description: The contact id
            beneficaries:
              type: array
              description: The beneficaries
              items:
                type: string
            docLocation:
              type: string
              description: The doc location
    BankCard:
      allOf:
        - $ref: "#/components/schemas/BankCardRequest"
        - $ref: "#/components/schemas/BasicObject"
    BankCardResponses:
      allOf:
        - $ref: "#/components/schemas/ReponseObject"
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/BankCard"
    BankCardResponse:
      allOf:
        - $ref: "#/components/schemas/ReponseObject"
        - type: object
          required:
            - data
          properties:
            data:
              $ref: "#/components/schemas/BankCard"
    InvestmentAccountRequest:
      allOf:
        - $ref: "#/components/schemas/CommonObject"
        - type: object
          required:
            - accountType
            - brokerage
            - nameOnAccount
            - docLocation
          properties:
            accountType:
              type: string
              description: The account type
            brokerage:
              type: string
              description: The brokerage
            nameOnAccount:
              type: string
              description: The name on account
            website:
              type: string
              description: The website
            url:
              type: string
              description: The url
            accountNumber:
              type: string
              description: The account number
            username:
              type: string
              description: The username
            password:
              type: string
              description: The password
            pinNumber:
              type: string
              description: The pin number
            securityQuestions:
              type: array
              description: The security questions
              items:
                $ref: "#/components/schemas/Question"
            monthlyFee:
              type: integer
              format: int64
              description: The monthly fee
            contactId:
              type: string
              description: The contact id
            beneficaries:
              type: array
              description: The beneficaries
              items:
                type: string
            docLocation:
              type: string
              description: The doc location
    InvestmentAccount:
      allOf:
        - $ref: "#/components/schemas/InvestmentAccountRequest"
        - $ref: "#/components/schemas/BasicObject"
    InvestmentAccountResponses:
      allOf:
        - $ref: "#/components/schemas/ReponseObject"
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/InvestmentAccount"
    InvestmentAccountResponse:
      allOf:
        - $ref: "#/components/schemas/ReponseObject"
        - type: object
          required:
            - data
          properties:
            data:
              $ref: "#/components/schemas/InvestmentAccount"
    InsuranceRequest:
      allOf:
        - $ref: "#/components/schemas/CommonObject"
        - type: object
          required:
            - insuranceType
            - coverageType
            - insuranceCompany
            - docLocation
          properties:
            insuranceType:
              type: string
              description: The insurance type
            coverageType:
              type: string
              description: The coverage type
            insuranceCompany:
              type: string
              description: The insurance company
            url:
              type: string
              description: The url
            nameOfInsured:
              type: string
              description: The name of insured
            nameOfCopy:
              type: string
              description: The name of copy
            policyOwner:
              type: string
              description: The policy owner
            policyNumber:
              type: string
              description: The policy number
            issuedDate:
              type: string
              format: date
              description: The issued date
            username:
              type: string
              description: The username
            password:
              type: string
              description: The password
            pinNumber:
              type: string
              description: The pin number
            coverageLimits:
              type: array
              description: The security questions
              items:
                type: object
            faceValue:
              type: integer
              format: int64
              description: The face value
            surrenderValue:
              type: integer
              format: int64
              description: The surrender value
            annualPremium:
              type: integer
              format: int64
              description: The annual premium
            expiredDate:
              type: string
              format: date
              description: The expired date
            beneficiary:
              type: string
              description: The beneficiary
            monthlyFee:
              type: integer
              format: int64
              description: The monthly fee
            annualFee:
              type: integer
              format: int64
              description: The monthly fee
            contactId:
              type: string
              description: The contact id
            employerId:
              type: string
              description: The employer id
            docLocation:
              type: string
              description: The doc location
    Insurance:
      allOf:
        - $ref: "#/components/schemas/InsuranceRequest"
        - $ref: "#/components/schemas/BasicObject"
    InsuranceResponses:
      allOf:
        - $ref: "#/components/schemas/ReponseObject"
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/Insurance"
    InsuranceResponse:
      allOf:
        - $ref: "#/components/schemas/ReponseObject"
        - type: object
          required:
            - data
          properties:
            data:
              $ref: "#/components/schemas/Insurance"
    PassportRequest:
      allOf:
        - $ref: "#/components/schemas/CommonObject"
        - type: object
          required:
            - fullName
            - passportNo
            - expiredDate
            - country
            - docLocation
          properties:
            fullName:
              type: string
              description: The full name
            passportNo:
              type: string
              description: The passport number
            expiredDate:
              type: string
              description: The expired date
            country:
              type: string
              description: The country
            docLocation:
              type: string
              description: The doc location
    Passport:
      allOf:
        - $ref: "#/components/schemas/PassportRequest"
        - $ref: "#/components/schemas/BasicObject"
    PassportResponses:
      allOf:
        - $ref: "#/components/schemas/ReponseObject"
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/Passport"
    PassportResponse:
      allOf:
        - $ref: "#/components/schemas/ReponseObject"
        - type: object
          required:
            - data
          properties:
            data:
              $ref: "#/components/schemas/Passport"
    ProLicenseRequest:
      allOf:
        - $ref: "#/components/schemas/CommonObject"
        - type: object
          required:
            - name
            - licenseType
            - licenseNumber
            - licenseLocation
            - docLocation
          properties:
            name:
              type: string
              description: The name
            licenseType:
              type: array
              description: The license type
              items:
                type: string
            licenseNumber:
              type: string
              description: The license number
            state:
              type: string
              description: The state
            country:
              type: string
              description: The country
            renewlDate:
              type: string
              format: date
              description: The renewl dat
            licenseLocation:
              type: string
              description: The license location
            docLocation:
              type: string
              description: The doc location
    ProLicense:
      allOf:
        - $ref: "#/components/schemas/ProLicenseRequest"
        - $ref: "#/components/schemas/BasicObject"
    ProLicenseResponses:
      allOf:
        - $ref: "#/components/schemas/ReponseObject"
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/ProLicense"
    ProLicenseResponse:
      allOf:
        - $ref: "#/components/schemas/ReponseObject"
        - type: object
          required:
            - data
          properties:
            data:
              $ref: "#/components/schemas/ProLicense"
    SoftwareRequest:
      allOf:
        - $ref: "#/components/schemas/CommonObject"
        - type: object
          required:
            - name
            - softwareType
            - platform
            - docLocation
          properties:
            name:
              type: string
              description: The name
            softwareType:
              type: string
              description: The software type
            serialNumber:
              type: string
              description: The serial number
            platform:
              type: string
              description: The platform
            passcode:
              type: string
              description: The passcode
            username:
              type: string
              description: The username
            password:
              type: string
              description: The password
            docLocation:
              type: string
              description: The doc location
    Software:
      allOf:
        - $ref: "#/components/schemas/SoftwareRequest"
        - $ref: "#/components/schemas/BasicObject"
    SoftwareResponses:
      allOf:
        - $ref: "#/components/schemas/ReponseObject"
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/Software"
    SoftwareResponse:
      allOf:
        - $ref: "#/components/schemas/ReponseObject"
        - type: object
          required:
            - data
          properties:
            data:
              $ref: "#/components/schemas/Software"
    SsnRequest:
      allOf:
        - $ref: "#/components/schemas/CommonObject"
        - type: object
          required:
            - fullName
            - ssnNo
          properties:
            fullName:
              type: string
              description: The full name
            ssnNo:
              type: string
              description: The ssn number
    Ssn:
      allOf:
        - $ref: "#/components/schemas/SsnRequest"
        - $ref: "#/components/schemas/BasicObject"
    SsnResponses:
      allOf:
        - $ref: "#/components/schemas/ReponseObject"
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/Ssn"
    SsnResponse:
      allOf:
        - $ref: "#/components/schemas/ReponseObject"
        - type: object
          required:
            - data
          properties:
            data:
              $ref: "#/components/schemas/Ssn"
    RewardsProgramRequest:
      allOf:
        - $ref: "#/components/schemas/CommonObject"
        - type: object
          required:
            - companyIssuingCard
          properties:
            companyIssuingCard:
              type: string
              description: Company issuing card
            rewardType:
              type: string
              description: Reward Type
            bankName:
              type: string
              description: Bank Name
            customerServicePhone:
              type: string
              description: Customer Service Phone
            nameOnAccount:
              type: string
              description: Name On Account
            accountNumber:
              type: string
              description: Account Number
            annualFee:
              type: number
              description: Annual Fee
    RewardsProgram:
      allOf:
        - $ref: "#/components/schemas/RewardsProgramRequest"
        - $ref: "#/components/schemas/BasicObject"
    RewardsProgramResponses:
      allOf:
        - $ref: "#/components/schemas/ReponseObject"
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/RewardsProgram"
    RewardsProgramResponse:
      allOf:
        - $ref: "#/components/schemas/ReponseObject"
        - type: object
          required:
            - data
          properties:
            data:
              $ref: "#/components/schemas/RewardsProgram"
    Error:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
      required:
        - status
        - message
x-amazon-apigateway-binary-media-types:
  - "multipart/form-data"
x-aws-api-id: "e0le8wlr77"
